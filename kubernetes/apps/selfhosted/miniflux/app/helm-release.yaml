---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app miniflux
spec:
  interval: 60m
  chart:
    spec:
      chart: app-template
      version: 2.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 60m
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      main:
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          enableServiceLinks: false
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
            supplementalGroups:
              - 65541
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app

        containers:
          main:
            image:
              repository: ghcr.io/miniflux/miniflux
              tag: 2.0.50

            env:
              BASE_URL: https://rss.${SECRET_DOMAIN}
              DATABASE_URL:
                valueFrom:
                  secretKeyRef:
                    name: database-miniflux-user
                    key: POSTGRES_URL
              CREATE_ADMIN: "1"
              DEBUG: "1"
              LOG_DATE_TIME: "1"
              POLLING_SCHEDULER: entry_frequency
              POLLING_FREQUENCY: "15"
              RUN_MIGRATIONS: "1"

            envFrom:
              - secretRef:
                  name: miniflux-secrets

            resources:
              requests:
                cpu: 10m
                memory: 100Mi
              limits:
                memory: 400Mi

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /healthcheck
                    port: &port 8080
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false

    service:
      main:
        ports:
          http:
            port: *port

    ingress:
      main:
        enabled: true
        className: nginx
        annotations:
          external-dns.alpha.kubernetes.io/target: ipv4.${SECRET_DOMAIN}
        hosts:
          - host: &host "rss.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
