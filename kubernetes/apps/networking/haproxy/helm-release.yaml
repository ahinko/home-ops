---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app haproxy
  namespace: networking
spec:
  interval: 60m
  chart:
    spec:
      chart: *app
      version: 1.15.0
      sourceRef:
        kind: HelmRepository
        name: haproxy-charts
        namespace: flux-system
      interval: 60m
  install:
    createNamespace: true
    remediation: # perform remediation when helm install fails
      retries: 3
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 3
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  # Values link: https://github.com/haproxytech/helm-charts/blob/main/haproxy/values.yaml
  values:
    image:
      repository: haproxytech/haproxy-alpine # can be changed to use CE or EE images
      tag: 2.6.2

    kind: Deployment
    replicaCount: 2

    ## Container listener port configuration
    ## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
    containerPorts: # has to match hostPorts when useHostNetwork is true
      http: 80
      https: 443
      stat: 1024
      redis: 6379

    strategy:
      rollingUpdate:
        maxSurge: 2
        maxUnavailable: 1
      type: RollingUpdate

    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

    service:
      type: ClusterIP # can be 'LoadBalancer'

    config: |
      global
        daemon
        maxconn 256

      defaults
        mode tcp
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms

      frontend http
        bind :1024
        default_backend stats

      backend stats
        mode http
        stats enable

        stats enable
        stats uri /
        stats refresh 1s
        stats show-legends
        stats admin if TRUE

      resolvers k8s
        parse-resolv-conf
        hold other           10s
        hold refused         10s
        hold nx              10s
        hold timeout         10s
        hold valid           10s
        hold obsolete        10s

      frontend redis
        bind *:6379
          default_backend redis-primary

      backend redis-primary
        mode tcp
        balance first
        option tcp-check
        tcp-check send AUTH\ ${SECRET_REDIS_PASSWORD}\r\n
        tcp-check expect string +OK
        tcp-check send info\ replication\r\n
        tcp-check expect string role:master
        server-template redis 3 _tcp-redis._tcp.redis-headless.databases.svc.cluster.local:6379 check inter 1s resolvers k8s init-addr none
