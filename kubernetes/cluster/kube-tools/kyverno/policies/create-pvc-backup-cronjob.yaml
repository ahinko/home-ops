---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: create-pvc-backup-cronjob
  annotations:
    policies.kyverno.io/title: Create PVC Backup Cronjob
    policies.kyverno.io/subject: PersistentVolumeClaim
    policies.kyverno.io/description: |
      This policy creates a CronJob for labeled PersistentVolumeClaims that creates backups

      The following labels on PVCs with their respective labels are required for this to run:
        - backup.home.lab/enabled
        - app.kubernetes.io/name
        - app.kubernetes.io/instance
spec:
  generateExistingOnPolicyUpdate: true
  mutateExistingOnPolicyUpdate: true
  rules:
    - name: create-backup-cronjob
      match:
        any:
          - resources:
              kinds:
                - PersistentVolumeClaim
              selector:
                matchLabels:
                  backup.home.lab/enabled: "true"
                  app.kubernetes.io/name: "*"
                  app.kubernetes.io/instance: "*"
      context:
        - name: appName
          variable:
            jmesPath: 'request.object.metadata.labels."app.kubernetes.io/name"'
        - name: claimName
          variable:
            jmesPath: "request.object.metadata.name"
        - name: namespace
          variable:
            jmesPath: "request.object.metadata.namespace"
        - name: exclude
          variable:
            jmesPath: 'request.object.metadata.annotations."backup.home.lab/exclude"'
        - name: healthcheck_url
          variable:
            jmesPath: 'request.object.metadata.annotations."backup.home.lab/healthcheck_url"'
        - name: nodeAffinity
          variable:
            value:
              labels:
                - key: app.kubernetes.io/name
                  operator: "In"
                  values:
                    - '{{ request.object.metadata.labels."app.kubernetes.io/name" }}'
                - key: app.kubernetes.io/instance
                  operator: "In"
                  values:
                    - '{{ request.object.metadata.labels."app.kubernetes.io/instance" }}'
      generate:
        synchronize: true
        apiVersion: batch/v1
        kind: CronJob
        name: "{{ claimName }}-backup"
        namespace: "{{ request.object.metadata.namespace }}"
        data:
          metadata:
            labels:
              app.kubernetes.io/name: '{{ request.object.metadata.labels."app.kubernetes.io/name" }}'
              app.kubernetes.io/instance: '{{ request.object.metadata.labels."app.kubernetes.io/instance" }}'
            ownerReferences:
              - apiVersion: "{{ request.object.apiVersion }}"
                kind: "{{ request.object.kind }}"
                name: "{{ request.object.metadata.name }}"
                uid: "{{ request.object.metadata.uid }}"
          spec:
            schedule: "0 9 * * *"
            suspend: false
            concurrencyPolicy: Forbid
            successfulJobsHistoryLimit: 1
            failedJobsHistoryLimit: 1
            jobTemplate:
              spec:
                # Keep at least one job in completed state in accordance to the schedule
                ttlSecondsAfterFinished: 86400
                template:
                  metadata:
                    annotations:
                      botkube.io/disable: "true"
                  spec:
                    automountServiceAccountToken: false
                    restartPolicy: Never
                    # Stagger jobs to run randomly within X seconds to avoid bringing down all apps at once
                    initContainers:
                      - name: sleep
                        image: ghcr.io/ahinko/simple-k8s-backup:v4.2.22
                        command: ["/sleep.sh"]
                        args: ["1", "900"]
                    containers:
                      - name: backup
                        image: ghcr.io/ahinko/simple-k8s-backup:v4.2.22
                        args:
                          - /run.sh
                        envFrom:
                          - secretRef:
                              name: backup-secrets
                        env:
                          - name: TZ
                            value: "${TIMEZONE}"
                          - name: MINIO_BUCKET
                            value: "backup"
                          - name: BACKUP_NAME
                            value: "{{ appName }}"
                          - name: DELETE_OLDER_THAN
                            value: "14d"
                          - name: EXCLUDE
                            value: "{{ exclude }}"
                          - name: HEALTHCHECK_URL
                            value: "{{ healthcheck_url }}"
                        volumeMounts:
                          - name: "{{ appName }}-persistent-storage"
                            mountPath: /{{ appName }}
                    volumes:
                      - name: "{{ appName }}-persistent-storage"
                        persistentVolumeClaim:
                          claimName: "{{ claimName }}"
                    affinity:
                      podAffinity:
                        requiredDuringSchedulingIgnoredDuringExecution:
                          - topologyKey: kubernetes.io/hostname
                            labelSelector:
                              matchExpressions: "{{ nodeAffinity.labels }}"
